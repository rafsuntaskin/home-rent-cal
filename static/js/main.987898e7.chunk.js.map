{"version":3,"sources":["components/TotalCard.js","components/Bills.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","minWidth","title","fontSize","pos","marginBottom","TotalCard","props","base","items","selectedBase","eBill","parseFloat","electricity","wBill","water","gas","sum","classes","Card","className","CardContent","Typography","variant","component","List","ListItem","color","gutterBottom","ListItemSecondaryAction","theme","root","container","textField","marginLeft","spacing","marginRight","width","Bills","subheader","ListSubheader","ListItemText","id","primary","Switch","name","checked","value","onChange","e","toggleBase","TextField","handleChange","type","inputProps","margin","InputLabelProps","shrink","App","change","target","setState","item","newState","state","updateData","AppBar","position","Container","maxWidth","this","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.987898e7.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nfunction TotalCard(props) {\n\n    let base = props.items.selectedBase ? 9000 : 11000;\n    let eBill = parseFloat(props.items.electricity) * 7;\n    let wBill = parseFloat(props.items.water) * 100;\n    let gas = props.items.gas ? 950 : 0;\n    let sum = eBill + gas + wBill + base;\n\n    const classes = useStyles();\n\n    return(\n        <div>\n            <Card className={classes.card}>\n                <CardContent>\n                    <Typography variant=\"h2\" component=\"h1\">\n                        {sum}\n                    </Typography>\n                    <List>\n                        <ListItem>\n                            <Typography className={classes.title} component=\"h4\" color=\"textSecondary\" gutterBottom>\n                                Rent\n                            </Typography>\n                            <ListItemSecondaryAction>\n                                <h3>{base}</h3>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <ListItem>\n                            <Typography className={classes.title} component=\"h4\" color=\"textSecondary\" gutterBottom>\n                                Electric Bill\n                            </Typography>\n                            <ListItemSecondaryAction>\n                                <h3>{eBill}</h3>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <ListItem>\n                            <Typography className={classes.title} component=\"h4\" color=\"textSecondary\" gutterBottom>\n                                Water Bill\n                            </Typography>\n                            <ListItemSecondaryAction>\n                                <h3>{wBill}</h3>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <ListItem>\n                            <Typography className={classes.title} component=\"h4\" color=\"textSecondary\" gutterBottom>\n                                Gas Bill\n                            </Typography>\n                            <ListItemSecondaryAction>\n                                <h3>{gas}</h3>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n\n                    </List>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\nconst useStyles = makeStyles({\n    card: {\n        minWidth: 275,\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    }\n});\nexport default TotalCard;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\n\nfunction Bills(props) {\n    const classes = useStyles();\n    return(\n        <div className=''>\n            <Card className={classes.root}>\n                <CardContent>\n                <List subheader={<ListSubheader>Set Units</ListSubheader>} className={classes.root}>\n                    <ListItem>\n                        <ListItemText id=\"base_rentA\" primary=\"11000 - 9000\"/>\n                        <ListItemSecondaryAction>\n                        <Switch name=\"selectedBase\"\n                                checked={props.items.selectedBase}\n                                value={props.items.selectedBase}\n                                onChange={(e)=> props.toggleBase('selectedBase', e) }\n                        />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText id=\"gas\" primary=\"Gas Bill\"/>\n                        <ListItemSecondaryAction>\n                            <Switch name=\"gas\"\n                                    checked={props.items.gas}\n                                    value={props.items.gas}\n                                    onChange={(e)=> props.toggleBase('gas', e) }\n                            />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText primary=\"Electric Units\"/>\n                        <ListItemSecondaryAction>\n                        <TextField\n                            id=\"electric\"\n                            value={props.items.electricity}\n                            onChange={(e)=> props.handleChange('electricity', e) }\n                            type=\"number\"\n                            className={classes.textField}\n                            inputProps={{ 'aria-label': 'bare' }}\n                            margin=\"normal\"\n                        />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText primary=\"Water Persons\"/>\n                        <ListItemSecondaryAction>\n                            <TextField\n                                id=\"water\"\n                                value={props.items.water}\n                                onChange={(e)=> props.handleChange('water', e) }\n                                type=\"number\"\n                                className={classes.textField}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                margin=\"normal\"\n                            />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                </List>\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        // padding: theme.spacing(3, 2),\n        // width: '100%',\n        // maxWidth: 600,\n        // backgroundColor: theme.palette.background.paper,\n    },\n    container: {\n        // display: 'flex',\n        // flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(1),\n        width: 100,\n    },\n\n}));\n\nexport default Bills","import React from 'react';\nimport {Button , AppBar, Container } from '@material-ui/core';\nimport TotalCard from './components/TotalCard';\nimport Bills from './components/Bills'\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            water: 0,\n            gas: true,\n            electricity:0,\n            selectedBase: true,\n        };\n    }\n\n    handleChange = (e) => {\n        // If you are using babel, you can use ES 6 dictionary syntax\n        // let change = { [e.target.name] = e.target.value }\n        let change = {};\n        change[e.target.name] = parseFloat(e.target.value);\n        this.setState(change)\n    }\n\n    toggleBase = (item, e) => {\n        let newState = {};\n        newState[item] = !this.state[item];\n        this.setState(newState);\n    }\n\n    updateData = (item, e) => {\n        let newState = {};\n        newState[item] = parseFloat(e.target.value);\n        this.setState(newState);\n    }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <AppBar position=\"relative\">\n                    <h3>Rent Calc</h3>\n                </AppBar>\n                <Container maxWidth=\"sm\">\n                    <TotalCard items={this.state}/>\n                    <Bills items={this.state} handleChange={this.updateData} toggleBase={this.toggleBase}/>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}